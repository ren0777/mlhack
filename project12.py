# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14eGCnTEB-pJjddILU7SOAyRnMTSVZOeP
"""

import pandas as pd

file_path = "https://github.com/ren0777/mlhack/blob/main/campaign_performance_large.csv"
df = pd.read_csv(file_path)

print(df.head())

print("Missing values:\n", df.isnull().sum())

df = df.dropna()

df

df['Date'] = pd.to_datetime(df['Date'])

df['Date']

# We Verifie cleaned data
print(df.info())

# Verify metrics (recalculate if necessary)
df['CTR (%)'] = (df['Clicks'] / df['Impressions']) * 100
df['CTR (%)']

df['Conversion Rate (%)'] = (df['Conversions'] / df['Clicks']) * 100
df['Conversion Rate (%)']

df['CAC ($)'] = df['Cost ($)'] / df['Conversions']
df['CAC ($)']

df['ROI (%)'] = ((df['Revenue ($)'] - df['Cost ($)']) / df['Cost ($)']) * 100

df['ROI (%)']

# Display updated DataFrame
print(df.head())

# Aggregate metrics by channel
channel_performance = df.groupby('Channel').agg({
    'Impressions': 'sum',
    'Clicks': 'sum',
    'Conversions': 'sum',
    'Cost ($)': 'sum',
    'Revenue ($)': 'sum'
}).reset_index()

channel_performance

# Add calculated metrics
channel_performance['CTR (%)'] = (channel_performance['Clicks'] / channel_performance['Impressions']) * 100
channel_performance['CTR (%)']

channel_performance['Conversion Rate (%)'] = (channel_performance['Conversions'] / channel_performance['Clicks']) * 100
channel_performance['Conversion Rate (%)']

channel_performance['CAC ($)'] = channel_performance['Cost ($)'] / channel_performance['Conversions']
channel_performance['CAC ($)']

channel_performance['ROI (%)'] = ((channel_performance['Revenue ($)'] - channel_performance['Cost ($)']) / channel_performance['Cost ($)']) * 100
channel_performance['ROI (%)']

# Displayed  channel performance
print(channel_performance)

import matplotlib.pyplot as plt

# Aggregated by date
date_trends = df.groupby('Date').agg({
    'Clicks': 'sum',
    'Conversions': 'sum',
    'Cost ($)': 'sum',
    'Revenue ($)': 'sum'
}).reset_index()

date_trends

plt.figure(figsize=(10, 6))
plt.plot(date_trends['Date'], date_trends['Conversions'], label='Conversions')
plt.plot(date_trends['Date'], date_trends['Revenue ($)'], label='Revenue')
plt.xlabel('Date')
plt.ylabel('Values')
plt.title('Trend Analysis Over Time')
plt.legend()
plt.show()

# Sort channels by ROI
sorted_channels = channel_performance.sort_values('ROI (%)', ascending=False)
sorted_channels

# Recommend top channels
top_channels = sorted_channels[['Channel', 'ROI (%)', 'CAC ($)']].head()
print("Top Channels for Budget Allocation:\n", top_channels)
